from aiogram import types
from aiogram.dispatcher.filters import Text

from loader import dp
from keybords.client_keybord import get_start_command_kb, information, \
                                    flat_information, entry_information
from db.database import DB
from google_sheets import spreadsheet

db = DB()

@dp.message_handler(lambda message: message.text=='üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def get_information(message:types.Message):
    await message.answer('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?',reply_markup=information())

@dp.message_handler(lambda message: message.text=='–ö–≤–∞—Ä—Ç–∏—Ä—ã')
async def get_flat_information(message:types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ:', reply_markup=flat_information())

@dp.message_handler(lambda message: message.text=='–ó–∞–ø–∏—Å–∏')
async def get_flat_information(message:types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ:', reply_markup=entry_information())

@dp.message_handler(lambda message: message.text=='–í—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã')
async def get_flat_information(message:types.Message):
    try:
        email = db.get_user(user_id=message['from']['id'])['email']
        gs = spreadsheet.GoogleSheet(email)
        worksheet_list = gs.get_all_worksheet()
        for worksheet in worksheet_list:
            await message.answer(f'–ê–¥—Ä–µ—Å: {worksheet.title}')
        await message.answer(f'–°–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ–ª—É—á–µ–Ω', reply_markup=get_start_command_kb())
    except AttributeError:
        await message.answer('–ü—Ä–æ–≤–µ—Ä—Ç–µ —Å–æ—Ö—Ä–æ–Ω—è–ª–∏ –ª–∏ –≤—ã email –∏\
            –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã', reply_markup=get_start_command_kb())

@dp.message_handler(lambda message: message.text=='–ó–∞–ø–∏—Å–∏ –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–µ')
async def get_entry_of_flat(message:types.Message):
    keyboard = types.InlineKeyboardMarkup()
    try:
        email = db.get_user(user_id=message['from']['id'])['email']
        gs = spreadsheet.GoogleSheet(email)
        worksheet_list = gs.get_all_worksheet()
        for worksheet in worksheet_list:
            keyboard.add(types.InlineKeyboardButton(text=worksheet.title,
                                                    callback_data=f"get entry: {worksheet.title}"))

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É:", reply_markup=keyboard)
    except AttributeError:
        await message.answer('–ü—Ä–æ–≤–µ—Ä—Ç–µ —Å–æ—Ö—Ä–æ–Ω—è–ª–∏ –ª–∏ –≤—ã email –∏\
            –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã', reply_markup=get_start_command_kb())

@dp.callback_query_handler(Text(startswith='get entry: '))
async def sdelete_worksheet(call: types.CallbackQuery):
    tablename = str(call.data).replace('get entry: ', '')
    email = db.get_user(user_id=call['from']['id'])['email']
    try:
        gs = spreadsheet.GoogleSheet(email)
        entries = gs.get_entries(tablename)
        await call.message.answer(entries) 
        await call.answer()
    except:
        await call.message.answer('–í–æ–∑–º–æ–∂–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–ø–∏—Å–∏...')
        await call.answer()




    